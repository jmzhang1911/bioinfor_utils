theme(text = element_text(size = 12), legend.position = 'bottom') -> p
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_tsne.png', path = 'results1/', width = 8.5, height = 4)
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_tsne.pdf', path = 'results1/', width = 8.5, height = 4)
combind_data %>%
group_by(Group, Clones) %>%
summarise(diff_type_number = length(unique(CDR3.aa))) %>%
ggplot(aes(x = log2(Clones), y = log2(diff_type_number))) +
geom_point(aes(colour = Group)) +
geom_smooth(aes(group = Group), se = F, colour = 'black', size = .5) +
geom_vline(xintercept = 1, linetype="dashed") +
labs(x = 'log2(number of cells per clonotype)', y = 'log2(number of clonotypes)') +
annotate(geom="text", x=.2, y=13, label="Nonclonal", size = 3) +
annotate(geom="text", x=3, y=13, label="clonal(chared>=2 cells)", size = 3) +
coord_cartesian( ylim = c(0, 13), clip = "off") +
scale_colour_nejm() +
#facet_wrap(~cellType) +
theme_test() +
theme(text = element_text(size = 14),
legend.title = element_blank())
combind_data %>%
group_by(Group, Clones) %>%
summarise(diff_type_number = length(unique(CDR3.aa))) %>%
ggplot(aes(x = log2(Clones), y = log2(diff_type_number))) +
geom_point(aes(colour = Group)) +
geom_smooth(aes(group = Group), se = F, colour = 'black', size = .5) +
geom_vline(xintercept = 1, linetype="dashed") +
labs(x = 'log2(number of cells per clonotype)', y = 'log2(number of clonotypes)') +
annotate(geom="text", x=.2, y=13, label="Nonclonal", size = 3) +
annotate(geom="text", x=3, y=13, label="clonal(chared>=2 cells)", size = 3) +
coord_cartesian( ylim = c(0, 13), clip = "off") +
scale_colour_nejm() +
#facet_wrap(~cellType) +
theme_test() +
theme(text = element_text(size = 14),
legend.title = element_blank()) -> p
p
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_line.png', path = 'results1/', width = 8, height = 5)
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_line.pdf', path = 'results1/', width = 8, height = 5)
p
combind_data %>%
group_by(Group, Clones, cellType) %>%
summarise(diff_type_number = length(unique(CDR3.aa))) %>%
ggplot(aes(x = log2(Clones), y = log2(diff_type_number))) +
geom_point(aes(colour = Group)) +
geom_smooth(aes(group = Group), se = F, colour = 'black', size = .5) +
geom_vline(xintercept = 1, linetype="dashed") +
labs(x = 'log2(number of cells per clonotype)', y = 'log2(number of clonotypes)') +
annotate(geom="text", x=.3, y=13, label="Nonclonal", size = 3) +
annotate(geom="text", x=3, y=13, label="clonal(chared>=2 cells)", size = 3) +
coord_cartesian( ylim = c(0, 13), clip = "off") +
scale_colour_nejm() +
facet_wrap(~cellType) +
theme_test() +
theme(text = element_text(size = 14),
legend.title = element_blank())
combind_data %>%
group_by(Group, Clones) %>%
summarise(diff_type_number = length(unique(CDR3.aa))) %>%
ggplot(aes(x = log2(Clones), y = log2(diff_type_number))) +
geom_point(aes(colour = Group)) +
geom_smooth(aes(group = Group), se = F, colour = 'black', size = .5) +
geom_vline(xintercept = 1, linetype="dashed") +
labs(x = 'log2(number of cells per clonotype)', y = 'log2(number of clonotypes)') +
annotate(geom="text", x=.2, y=13, label="Nonclonal", size = 3) +
annotate(geom="text", x=3, y=13, label="clonal(chared>=2 cells)", size = 3) +
coord_cartesian( ylim = c(0, 13), clip = "off") +
scale_colour_nejm() +
#facet_wrap(~cellType) +
theme_test() +
theme(text = element_text(size = 14),
legend.title = element_blank()) -> p
ggsave(p5, filename = 'Nonclonal_Clonal_line.png', path = 'results1/', width = 6, height = 5)
ggsave(p5, filename = 'Nonclonal_Clonal_line.pdf', path = 'results1/', width = 6, height = 5)
ggsave(p, filename = 'Nonclonal_Clonal_line.png', path = 'results1/', width = 6, height = 5)
ggsave(p, filename = 'Nonclonal_Clonal_line.pdf', path = 'results1/', width = 6, height = 5)
combind_data %>%
group_by(Group, Clones, cellType) %>%
summarise(diff_type_number = length(unique(CDR3.aa))) %>%
ggplot(aes(x = log2(Clones), y = log2(diff_type_number))) +
geom_point(aes(colour = Group)) +
geom_smooth(aes(group = Group), se = F, colour = 'black', size = .5) +
geom_vline(xintercept = 1, linetype="dashed") +
labs(x = 'log2(number of cells per clonotype)', y = 'log2(number of clonotypes)') +
annotate(geom="text", x=.3, y=13, label="Nonclonal", size = 3) +
annotate(geom="text", x=3, y=13, label="clonal(chared>=2 cells)", size = 3) +
coord_cartesian( ylim = c(0, 13), clip = "off") +
scale_colour_nejm() +
facet_wrap(~cellType) +
theme_test() +
theme(text = element_text(size = 14),
legend.title = element_blank())  -> p
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_line.png', path = 'results1/', width = 8, height = 5)
ggsave(p, filename = 'Nonclonal_Clonal_across_cell_line.pdf', path = 'results1/', width = 8, height = 5)
### 多样性
library(scRepertoire)
seob
colnames(seob)[1:10]
list.dirs('/Volumes/My_Passport/data_of_server/AL924/vdj_combined/')
list.file('/Volumes/My_Passport/data_of_server/AL924/vdj_combined/')
list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_combined/')
list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/')
contig_list <- lapply(list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/'),
function(x){read.csv(x)})
contig_list <- lapply(list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/'),
function(x){read.csv(x)})
contig_list <- lapply(list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/'), function(x){read.csv(x)})
list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/')
contig_list <- lapply(list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/', full.names = T),
function(x){read.csv(x)})
contig_list
list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/', full.names = T)
combine <- combineTCR(contig_list)
combine <- combineTCR(contig_list,
#samples = c("G1Po", "PY", "PX", "PX", "PZ","PZ"),
#ID = c("P", "T", "P", "T", "P", "T"),
cells ="T-AB")
combine <- combineTCR(contig_list,
samples = c("G1Po", "G1Pr", "G2Po", "G2Pr", "G3Po","G3Pr"),
#ID = c("P", "T", "P", "T", "P", "T"),
cells ="T-AB")
combine
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, sample))
}
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, i))
names(combine)
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, barcode, i))
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, barcode, i))
}
View(combine)
contig_list <- lapply(list.files('/Volumes/My_Passport/data_of_server/AL924/vdj_data/', full.names = T),
function(x){read.csv(x)})
combine <- combineTCR(contig_list,
samples = c("G1Po", "G1Pr", "G2Po", "G2Pr", "G3Po","G3Pr"),
#ID = c("P", "T", "P", "T", "P", "T"),
cells ="T-AB")
names(combine)
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, barcode, i))
}
View(combine)
combine <- combineTCR(contig_list,
samples = c("G1Po", "G1Pr", "G2Po", "G2Pr", "G3Po","G3Pr"),
#ID = c("P", "T", "P", "T", "P", "T"),
cells ="T-AB")
View(combine)
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, i))
}
View(combine)
names(combine)
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, i, ''))
}
View(combine)
combine <- combineTCR(contig_list,
samples = c("G1Po", "G1Pr", "G2Po", "G2Pr", "G3Po","G3Pr"),
#ID = c("P", "T", "P", "T", "P", "T"),
cells ="T-AB")
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, st_c(i, '_'), ''))
}
for(i in names(combine)){
combine[[i]] <- mutate(combine[[i]], barcode = str_replace(barcode, str_c(i, '_'), ''))
}
View(combine)
seurat <- combineExpression(combine, seob,
cloneCall="aa",
proportion = FALSE)
seurat
clonalDiversity(seurat,
cloneCall = "aa",
group.by = "sample",
x.axis = "ID",
n.boots = 100)
View(seurat)
seurat@meta.data %>% View()
colnames(seob@meta.data)
seob@meta.data %>%
rownames_to_column('barcode') %>%
filter(barcode %in% valid_barcode$Barcode) %>%
left_join(valid_barcode, by = c('barcode'='Barcode')) %>%
mutate(sample = str_remove(sample, '-sc'),
Group = if_else(group == 'G1Po-sc_G2Po-sc_G3Po-sc', 'Post', 'Pre')) -> seob@meta.data
seurat <- combineExpression(combine, seob,
cloneCall="aa",
proportion = FALSE)
seob
seob@meta.data
seob@meta.data <- seob@meta.data %>% column_to_rownames('barcode')
seurat <- combineExpression(combine, seob,
cloneCall="aa",
proportion = FALSE)
seob
seob@meta.data
seob <- readRDS('/Volumes/My_Passport/data_of_server/AL924/seuratdata/anno_seurat_object.Rds')
### 修改barcode名称
seob@meta.data %>%
rownames_to_column('barcode') %>%
mutate(new_barcode = str_c(str_remove(sample, '-sc'), barcode, sep = '_'),
new_barcode = str_remove(new_barcode, '_[0-9]+')) %>% pull(new_barcode) -> new_barcode
seob <- RenameCells(seob, new.names = new_barcode)
seob <- subset(seob, subset = cellType != 'other')
seob@meta.data %>%
rownames_to_column('barcode') %>%
#filter(barcode %in% valid_barcode$Barcode) %>%
left_join(valid_barcode, by = c('barcode'='Barcode')) %>%
mutate(sample = str_remove(sample, '-sc'),
Group = if_else(group == 'G1Po-sc_G2Po-sc_G3Po-sc', 'Post', 'Pre')) %>%
column_to_rownames('barcode')-> seob@meta.data)
seob@meta.data %>%
rownames_to_column('barcode') %>%
#filter(barcode %in% valid_barcode$Barcode) %>%
left_join(valid_barcode, by = c('barcode'='Barcode')) %>%
mutate(sample = str_remove(sample, '-sc'),
Group = if_else(group == 'G1Po-sc_G2Po-sc_G3Po-sc', 'Post', 'Pre')) %>%
column_to_rownames('barcode')-> seob@meta.data
seurat <- combineExpression(combine, seob,
cloneCall="aa",
proportion = FALSE)
colnames(seob@meta.data)
colnames(seurat@meta.data)
clonalDiversity(seurat,
cloneCall = "aa",
group.by = "Group",
x.axis = "Group",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
group.by = "cellType",
x.axis = "Group",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
group.by = "sample",
x.axis = "cellType",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
group.by = "class",
x.axis = "cellType",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
split.by = 'cellType',
group.by = "sample",
x.axis = "Group",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
split.by = 'cellType',
#group.by = "sample",
x.axis = "Group",
n.boots = 100)
clonalDiversity(seurat,
cloneCall = "aa",
#split.by = 'cellType',
group.by = "sample",
x.axis = "Group",
n.boots = 100)
combined
View(combined)
combined
####
select_clusters(.data = combined, .clusters, .field = "Cluster")
####
colnames(combined$data$vdj_combined.filtered_contig_annotations)
####
seob
####
colnames(seob@meta.data)
####
Idents(seob, cellType)
####
Idents(seob, 'cellType')
seob
glimpse(seob)
####
Idents(seob)
select_clusters(.data = combined, Idents(seob))
select_clusters(.data = combined, Idents(seob),.field = "Cluster")
select_clusters(.data = combined, Idents(seob))
select_clusters(.data = combined, Idents(seob))
Idents(seob)
table(seob@meta.data$cellType)
unique(seob@meta.data$cellType)
unique(seob@meta.data$cellType)[1] -> cell_1
cell_1
seob@meta.data %>% colnames()
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, cellType, Group) %>%
filter(cellType == 'cell_1')
cell_1
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, cellType, Group) %>%
filter(cellType == cell_1)
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, cellType, Group) %>%
filter(cellType == cell_1) -> d
d$Group
d$Group -> v
names(v) <- d$barcode
v
select_clusters(.data = combined, v,.field = "Cluster")
select_clusters(.data = combined, Idents(seob)) -> new_immdata
select_clusters(.data = combined, v,.field = "Group")
repDiversity(new_immdata$data, 'gini.simp', field = "Group") %>%
vis(.by = c("Group"), .meta = immdata$meta) -> p1_div
select_clusters(.data = combined, Idents(seob),field = "Group") -> new_immdata
select_clusters(.data = combined, Idents(seob), .field = "Group") -> new_immdata
repDiversity(new_immdata$data, 'gini.simp') %>%
vis(.by = c("Group"), .meta = immdata$meta) -> p1_div
new_immdata
select_clusters(.data = combined, v, .field = "Group") -> new_immdata
new_immdata
repDiversity(new_immdata$data, 'gini.simp') %>%
vis(.by = c("Group"), .meta = new_immdata$meta) -> p1_div
p1_div
colname_subcluster = 'cellType'
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), Group) %>%
filter(cellType == cell_1) -> d
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), Group)
colname_subcluster = 'seurat_clusters'
colname_subcluster = 'seurat_clusters'
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), Group) %>%
filter(cellType == cell_1) -> d
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), Group)
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group))
cell_1
colname_subcluster = "Natural killer T (NKT) cell"
unique(seob[[colname_subcluster]])
colname_subcluster = 'cellType'
cell_type = "Natural killer T (NKT) cell"
unique(seob[[colname_subcluster]])
seob[[colname_subcluster]]
seob@meta.data[[colname_subcluster]]
unique(seob@meta.data[[colname_subcluster]])
colname_subcluster = 'cellType'
cell_type = "Natural killer T (NKT) cell"
unique(seob@meta.data[[colname_subcluster]])
colname_group = 'Group'
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(as.symbol(colname_subcluster) == as.symbol(cell_type)) -> d
d
as.symbol(cell_type)
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(!!as.symbol(colname_subcluster) == as.symbol(cell_type)) -> d
d
d[[colname_group]] -> v
names(v) <- d$barcode
v
repDiversity(immdata$data, 'd50')
repDiversity(new_immdata$data, 'd50')
select_clusters(.data = combined, v, .field = "Group") -> new_immdata
repDiversity(new_immdata$data, 'd50')
epDiversity(new_immdata$data, 'chao1')
repDiversity(new_immdata$data, 'chao1')
source('../../../mygithub/bioinfor_utils/Utils.R')
str_replace_all(cell_type, '[ @,]')
str_replace_all(cell_type, '[ @,]', '_')
str_replace_all(cell_type, '[ @,()]', '_')
repDiversity(new_immdata$data, 'd50') %>%
vis(.by = c("Group"), .meta = immdata$meta) -> p2_div
repDiversity(new_immdata$data, 'd50') %>%
vis(.by = c("Group"), .meta = new_immdata$meta) -> p2_div
p2_div
new_immdata
####
immdata <- repLoad(.path = '/Volumes/My_Passport/data_of_server/AL924/vdj_data/', .mode = "paired")
names(immdata$data) <- names(immdata$data) %>% str_remove('-t.filtered_contig_annotations')
immdata$meta$Sample <- immdata$meta$Sample %>% str_remove('-t.filtered_contig_annotations')
for (i in names(immdata$data)){
immdata$data[[i]]$sample <- i
}
immdata$meta$group <- c('Post-1', 'Pre-1', 'Post-2', 'Pre-2', 'Post-3', 'Pre-3')
immdata$meta$Group <- immdata$meta$group %>% str_remove('-[0-9]')
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(!!as.symbol(colname_subcluster) == as.symbol(cell_type)) %>%
pull(barcode) -> d
d
select_barcodes(.data, .barcodes = d, .force.list = FALSE)
d[[colname_subcluster]] -> v
names(v) <- d$barcode
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(!!as.symbol(colname_subcluster) == as.symbol(cell_type)) -> d
d[[colname_subcluster]]
d[[colname_subcluster]] -> v
names(v) <- d$barcode
v
select_barcodes(.data , .barcodes = v, .force.list = FALSE)
combined
View(combined)
immdata
View(immdata)
select_barcodes(.data = immdata , .barcodes = v, .force.list = FALSE)
select_clusters(.data = immdata, v, .field = "Group") -> new_immdata
new_immdata
repDiversity(new_immdata$data, 'd50') %>%
vis(.by = c("Group.source"), .meta = new_immdata$meta) -> p2_div
p2_div
immdata$meta$group <- c('Post-1', 'Pre-1', 'Post-2', 'Pre-2', 'Post-3', 'Pre-3')
####
immdata <- repLoad(.path = '/Volumes/My_Passport/data_of_server/AL924/vdj_data/', .mode = "paired")
names(immdata$data) <- names(immdata$data) %>% str_remove('-t.filtered_contig_annotations')
immdata$meta$Sample <- immdata$meta$Sample %>% str_remove('-t.filtered_contig_annotations')
immdata$meta$group <- c('Post-1', 'Pre-1', 'Post-2', 'Pre-2', 'Post-3', 'Pre-3')
immdata$meta$Origin_Group <- immdata$meta$group %>% str_remove('-[0-9]')
select_clusters(.data = immdata, v, .field = "Group") -> new_immdata
new_immdata
repDiversity(new_immdata$data, 'd50') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p2_div
p2_div
repDiversity(new_immdata$data, 'd50')
repDiversity(new_immdata$data, 'gini.simp') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p1_div
repDiversity(immdata$data, 'chao1') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p3_div
repDiversity(new_immdata$data, 'chao1') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p3_div
repDiversity(new_immdata$data, 'div') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p4_div
(p1_div | p2_div) / (p3_div | p4_div) -> p6
p6
p6 + labs(title = cell_type)
call_subcluster_repDiversity <- function(seob, immidata, colname_subcluster, outputs){
# colname_subcluster = 'cellType'
# cell_type = "Natural killer T (NKT) cell"
# colname_group = 'Group'
for(cell_type in unique(seob@meta.data[[colname_subcluster]])){
source('../../../mygithub/bioinfor_utils/Utils.R')
out = file.path(outputs, str_replace_all(cell_type, '[ @,()]', '_'))
MyMkdir(out)
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(!!as.symbol(colname_subcluster) == as.symbol(cell_type)) -> d
d[[colname_subcluster]] -> v
names(v) <- d$barcode
select_clusters(.data = immdata, v, .field = "Group") -> new_immdata
repDiversity(new_immdata$data, 'gini.simp') %>%
write.csv(file = file.path(out, 'gini.simp.csv'), row.names = F)
repDiversity(new_immdata$data, 'gini.simp') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p1_div
repDiversity(new_immdata$data, 'd50') %>%
write.csv(file = file.path(out, 'd50.csv'), row.names = F)
repDiversity(new_immdata$data, 'd50') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p2_div
repDiversity(new_immdata$data, 'chao1') %>%
write.csv(file = file.path(out, 'chao1.csv'), row.names = F)
repDiversity(new_immdata$data, 'chao1') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p3_div
repDiversity(new_immdata$data, 'div') %>%
write.csv(file = file.path(out, 'div.csv'), row.names = F)
repDiversity(new_immdata$data, 'div') %>%
vis(.by = c("Origin_Group"), .meta = new_immdata$meta) -> p4_div
(p1_div | p2_div) / (p3_div | p4_div) -> p6
ggsave(p6, filename = 'Diversity.png', path = out, width = 10, height = 10)
ggsave(p6, filename = 'Diversity.pdf', path = out, width = 10, height = 10)
}
}
call_subcluster_repDiversity(seob, immidata = immidata, colname_subcluster = 'cellType', outputs = 'results2')
colname_subcluster = 'cellType'
cell_type = "Natural killer T (NKT) cell"
colname_group = 'Group'
out = file.path(outputs, str_replace_all(cell_type, '[ @,()]', '_'))
unique(seob@meta.data$cellType)
cell_type = unique(seob@meta.data$cellType)[1:2]
cell_type
seob@meta.data %>%
rownames_to_column('barcode') %>%
select(barcode, as.symbol(colname_subcluster), as.symbol(colname_group)) %>%
filter(!!as.symbol(colname_subcluster) %in% cell_type) -> d
d
d[[colname_subcluster]] -> v
names(v) <- d$barcode
table(v)
select_clusters(.data = immdata, v, .field = "Group")
select_clusters(.data = immdata, v, .field = "Group") %>% View()
select_clusters(.data = immdata, v, .field = "Group") -> tmp
repDiversity(.data = tmp$data, 'div')
tmp
repDiversity(.data = tmp$data, 'div') %>%
vis(.by = c("Origin_Group", 'Group'), .meta = new_immdata$meta)
select_clusters(.data = immdata, v, .field = "cellType") -> tmp
tmp
immdata$meta
repDiversity(.data = tmp$data, 'div') %>%
vis(.by = c("Origin_Group", 'cellType'), .meta = new_immdata$meta)
repDiversity(.data = tmp$data, 'div') %>%
vis(.by = c("Origin_Group", 'cellType'), .meta = tmp$meta)
