monocle_cds <- setOrderingFilter(monocle_cds, unsup_clustering_genes$gene_id)
varibalegene <- intersect(VariableFeatures(single.seurat), rownames(monocle_cds))
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2, perplexity = opt$perplexity,
num_dim = 6, reduction_method = "tSNE")
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2,
reduction_method = "DDRTree")
# monocle_cds <- clusterCells(monocle_cds, num_clusters = length(levels(single.seurat))+ 1)
monocle_cds <- orderCells(monocle_cds)
my.data <- pData(monocle_cds)
monocle.data <- my.data %>%
rownames_to_column("Cell") %>%
select(c("Cell", "sample", cell_Type, "Pseudotime", "State"))
write.table(file = file.path(dir, "Pseudotime_summary.xls"), monocle.data, quote = FALSE, sep = "\t", row.names = FALSE)
p.trace.cluster <- plot_cell_trajectory(monocle_cds, color_by = cell_Type)
SavePlot(od = dir, filename = "cell_trajectory_cluster", data = p.trace.cluster)
p.trace.state <- plot_cell_trajectory(monocle_cds, color_by = "State")
SavePlot(od = dir, filename = "cell_trajectory_state", data = p.trace.state)
}
monocle_trace(seob = './cell_cycle_analysis/YYL-sc.single_seruat.Rds', dir = 'output', cell_Type = 'cellType')
library(tidyverse)
library(patchwork)
MyMkdir <- function(x){if(!dir.exists(x)){dir.create(x,recursive = T)}else(cat('existed dir\n'))}
SavePlot <- function(od, filename, data, width = 6, height = 4, scale = 1.3){
file.png <- paste(sample, filename, "png", sep = ".")
file.pdf <- paste(sample, filename, "pdf", sep = ".")
ggsave(filename = file.path(od, file.png), plot = data, width = width, height = height, scale = scale)
ggsave(filename = file.path(od, file.pdf), plot = data, width = width, height = height, scale = scale)
}
monocle_trace <- function(seob, dir, cell_Type){
MyMkdir(dir)
library(Seurat)
library(monocle)
minexp <- 0.1
mincell <- 10
top.n <- 50
perplexity <- 30
single.seurat <- readRDS(seob)
# export seurat to monocle object
data <- as(as.matrix(single.seurat@assays$RNA@counts), "sparseMatrix")
pd <- new("AnnotatedDataFrame", data = single.seurat@meta.data)
fData <- data.frame(gene_short_name = rownames(data), row.names = rownames(data))
fd <- new('AnnotatedDataFrame', data = fData)
monocle_cds <- newCellDataSet(as(data, "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = minexp,
expressionFamily = negbinomial.size())
# requred, estimate sizefactor and dispersion
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
# filter low expression genes
monocle_cds <- detectGenes(monocle_cds, min_expr = minexp)
expressed_genes <- row.names(subset(fData(monocle_cds), num_cells_expressed >= mincell))
monocle_cds <-  monocle_cds[expressed_genes, ]
disp_table <- dispersionTable(monocle_cds)
unsup_clustering_genes <- subset(disp_table, mean_expression >= minexp)
monocle_cds <- setOrderingFilter(monocle_cds, unsup_clustering_genes$gene_id)
varibalegene <- intersect(VariableFeatures(single.seurat), rownames(monocle_cds))
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2, perplexity = opt$perplexity,
num_dim = 6, reduction_method = "tSNE")
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2,
reduction_method = "DDRTree")
# monocle_cds <- clusterCells(monocle_cds, num_clusters = length(levels(single.seurat))+ 1)
monocle_cds <- orderCells(monocle_cds)
my.data <- pData(monocle_cds)
monocle.data <- my.data %>%
rownames_to_column("Cell") %>%
select(c("Cell", "sample", cell_Type, "Pseudotime", "State"))
write.table(file = file.path(dir, "Pseudotime_summary.xls"), monocle.data, quote = FALSE, sep = "\t", row.names = FALSE)
p.trace.cluster <- plot_cell_trajectory(monocle_cds, color_by = cell_Type)
SavePlot(od = dir, filename = "cell_trajectory_cluster", data = p.trace.cluster)
p.trace.state <- plot_cell_trajectory(monocle_cds, color_by = "State")
SavePlot(od = dir, filename = "cell_trajectory_state", data = p.trace.state)
}
monocle_trace(seob = './cell_cycle_analysis/YYL-sc.single_seruat.Rds', dir = 'output', cell_Type = 'cellType')
seob = './cell_cycle_analysis/YYL-sc.single_seruat.Rds'
dir = 'output'
cell_Type = 'cellType'
MyMkdir(dir)
setwd("~/workspace/mygithub/bioinfor_utils/cell_trace_analysis")
library(Seurat)
MyMkdir(dir)
library(Seurat)
library(monocle)
minexp <- 0.1
mincell <- 10
top.n <- 50
perplexity <- 30
single.seurat <- readRDS(seob)
seob = '../cell_cycle_analysis/YYL-sc.single_seruat.Rds'
single.seurat <- readRDS(seob)
# export seurat to monocle object
data <- as(as.matrix(single.seurat@assays$RNA@counts), "sparseMatrix")
pd <- new("AnnotatedDataFrame", data = single.seurat@meta.data)
fData <- data.frame(gene_short_name = rownames(data), row.names = rownames(data))
fd <- new('AnnotatedDataFrame', data = fData)
monocle_cds <- newCellDataSet(as(data, "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = minexp,
expressionFamily = negbinomial.size())
# requred, estimate sizefactor and dispersion
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
single.seurat
single.seurat@meta.data
cell_Type
if(!cell_Type %in% colnames(single.seurat@meta.data)){
stop('wrong celltype colname')
}
rm(single.seurat);gc()
option_list <- list(
make_option(c('-s', '--seurat_Obj'), type = 'character', help = 'seurat Object'),
make_option(c('-c','--cell_type'), type = 'character', help = 'colname of celltype', default = 'cellType'),
make_option(c('-o', '--output'), type = 'character', help = 'output', default = 'cell_cycle_results')
)
opt <- parse_args(OptionParser(option_list = option_list))
library(optparse)
option_list <- list(
make_option(c('-s', '--seurat_Obj'), type = 'character', help = 'seurat Object'),
make_option(c('-c','--cell_type'), type = 'character', help = 'colname of celltype', default = 'cellType'),
make_option(c('-o', '--output'), type = 'character', help = 'output', default = 'cell_cycle_results')
)
opt <- parse_args(OptionParser(option_list = option_list))
opt
option_list <- list(
make_option(c('-s', '--seurat_Obj'), type = 'character', help = 'seurat Object'),
make_option(c('-c','--cell_type'), type = 'character', help = 'colname of celltype', default = 'cellType'),
make_option(c('-o', '--output'), type = 'character', help = 'output', default = 'cell_cycle_results')
)
opt <- parse_args(OptionParser(option_list = option_list))
opt
option_list <- list(
make_option(c('-s', '--seurat_obj'), type = 'character', help = 'seurat object'),
make_option(c('-c', '--cell_type'), type = 'character', help = 'colname of celltype', default = 'cellType'),
make_option(c('-o', '--output'), type = 'character', help = 'output', default = 'cell_cycle_results')
)
opt <- parse_args(OptionParser(option_list = option_list))
opt
library(optparse)
option_list <- list(
make_option(c('-s', '--seurat_obj'), type = 'character', help = 'seurat object'),
make_option(c('-c', '--cell_type'), type = 'character', help = 'colname of celltype', default = 'cellType'),
make_option(c('-o', '--output'), type = 'character', help = 'output', default = 'cell_cycle_results')
)
View(option_list)
opt <- parse_args(OptionParser(option_list = option_list))
View(opt)
monocle_trace <- function(seob, dir, cell_Type){
MyMkdir(dir)
library(Seurat)
library(monocle)
minexp <- 0.1
mincell <- 10
top.n <- 50
perplexity <- 30
single.seurat <- readRDS(seob)
if(!cell_Type %in% colnames(single.seurat@meta.data)){
stop('wrong celltype colname')
}
VariableFeatures <- VariableFeatures(single.seurat)
# export seurat to monocle object
data <- as(as.matrix(single.seurat@assays$RNA@counts), "sparseMatrix")
pd <- new("AnnotatedDataFrame", data = single.seurat@meta.data)
rm(single.seurat);gc()
fData <- data.frame(gene_short_name = rownames(data), row.names = rownames(data))
fd <- new('AnnotatedDataFrame', data = fData)
monocle_cds <- newCellDataSet(as(data, "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = minexp,
expressionFamily = negbinomial.size())
# requred, estimate sizefactor and dispersion
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
# filter low expression genes
monocle_cds <- detectGenes(monocle_cds, min_expr = minexp)
expressed_genes <- row.names(subset(fData(monocle_cds), num_cells_expressed >= mincell))
monocle_cds <-  monocle_cds[expressed_genes, ]
disp_table <- dispersionTable(monocle_cds)
unsup_clustering_genes <- subset(disp_table, mean_expression >= minexp)
monocle_cds <- setOrderingFilter(monocle_cds, unsup_clustering_genes$gene_id)
varibalegene <- intersect(VariableFeatures, rownames(monocle_cds))
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2, perplexity = perplexity,
num_dim = 6, reduction_method = 'tSNE')
monocle_cds <- reduceDimension(monocle_cds[varibalegene, ], max_components = 2,
reduction_method = "DDRTree")
# monocle_cds <- clusterCells(monocle_cds, num_clusters = length(levels(single.seurat))+ 1)
monocle_cds <- orderCells(monocle_cds)
my.data <- pData(monocle_cds)
monocle.data <- my.data %>%
rownames_to_column("Cell") %>%
select(c("Cell", "sample", all_of(cell_Type), "Pseudotime", "State"))
write.table(file = file.path(dir, "Pseudotime_summary.xls"), monocle.data, quote = FALSE, sep = "\t", row.names = FALSE)
p.trace.cluster <- plot_cell_trajectory(monocle_cds, color_by = cell_Type)
SavePlot(od = dir, filename = "cell_trajectory_cluster", data = p.trace.cluster)
p.trace.state <- plot_cell_trajectory(monocle_cds, color_by = "State")
SavePlot(od = dir, filename = "cell_trajectory_state", data = p.trace.state)
}
getwd()
file.path('a', 'b')
paste('a', 'b', sep = '.')
paste('a', 'b', sep = '\\.')
paste('a', 'b', sep = '\.')
paste('a', 'b', sep = '\\.')
library(Seurat)
cluster_tmp <- 'a asdf  ; adf__ adsf'
str_replace_all(cluster_tmp, '_|;| ', '_')
str_replace_all(cluster_tmp, ';| |,|-', '_')
str_replace_all('adf;asdf,asdf_adsf;; asdfadf  adf', ';| |,|-', '_')
??quit()
??stop()
saveRDS(opt, file = paste('tmp.rds'))
setwd("~/workspace/mygithub/bioinfor_utils/cell_cycle_analysis")
library(Seurat)
library(tidyverse)
seob <- readRDS('./YYL-sc.single_seruat.Rds')
CellCycleScoring(seob, s.features = 'abc')
CellCycleScoring(seob, s.features = 'abc', g2m.features = 'abc2')
getwd()
library(tidyverse)
attach(mtcars)
dim(mtcars)
setwd("~/workspace/mygithub/bioinfor_utils/small_task")
getwd()
gc()
gc()
gene_id2trans_id <- read.table('./gene_id2trans_id.txt', sep = '\t') %>%
distinct()
View(gene_id2trans_id)
symbol_list <- read.table('./symbol.list')
View(symbol_list)
gene_id2trans_id <- read.table('./gene_id2trans_id.txt', sep = '\t') %>%
distinct() %>% tail()
gene_id2trans_id
gene_id2trans_id <- read.table('./gene_id2trans_id.txt', sep = '\t') %>%
distinct() %>%
mutate(V2 = str_replace_all(V2, ':', '_'))
symbol_list <- read.table('./symbol.list')
symbol_list
gene_id2trans_id <- read.table('./gene_id2trans_id.txt', sep = '\t') %>%
distinct() %>%
mutate(V2 = str_replace_all(V2, ':', '_'))
gene_id2trans_id
tail(gene_id2trans_id)
tail(symbol_list)
Known_longest_transcript_fa_Kegg <- read_delim("Known.longest_transcript.fa.Kegg.pathway",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Known_longest_transcript_fa_Kegg)
Known_longest_transcript_fa_Kegg %>%
colnames()
MyChangeKegg <- function(x){
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id %>%
as.data.frame() %>%
mutate(V2 = str_replace(V2, ':', '_')), by = c('origin'='V2'))
return(res)
}
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(new_id = MyChangeKegg(x = Gene_id))
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id))
MyChangeKegg <- function(x){
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id %>%
as.data.frame() %>%
mutate(V2 = str_replace(V2, ':', '_')), by = c('origin'='V2')) %>%
pull(V1) %>% str_c(collapse = ';')
return(res)
}
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id))
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id)) -> tmp
Known_longest_transcript_fa_Kegg %>%
rowwise() %>% head() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id)) -> tmp
View(tmp)
MyChangeKegg <- function(x){
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
pull(V1) %>% str_c(collapse = ';')
return(res)
}
Known_longest_transcript_fa_Kegg %>%
rowwise() %>% head() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id)) -> tmp
View(tmp)
x <- Known_longest_transcript_fa_Kegg %>% head(1) %>% pull(Gene_id)
x
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
all_gene
gene_id2trans_id
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
pull(V1) %>% str_c(collapse = ';')
res
data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2'))
data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
pull(V1)
data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
drop_na() %>%
pull(V1) %>% str_c(collapse = ';')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
drop_na() %>%
pull(V1) %>% str_c(collapse = ';') %>%
str_c(';')
res
MyChangeKegg <- function(x){
#x <- Known_longest_transcript_fa_Kegg %>% head(1) %>% pull(Gene_id)
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>%
drop_na() %>%
pull(V1) %>% str_c(collapse = ';') %>%
str_c(';')
return(res)
}
Known_longest_transcript_fa_Kegg %>%
rowwise() %>% head() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id)) -> tmp
View(tmp)
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
new_id = MyChangeKegg(x = Gene_id)) -> tmp
View(tmp)
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
Gene_id = MyChangeKegg(x = Gene_id)) -> kegg_pathway
Known_longest_transcript_fa_GO_list <- read_delim("Known.longest_transcript.fa.GO.list.txt",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
View(Known_longest_transcript_fa_GO_list)
MyChangeKegg <- function(x){
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>% drop_na() %>% pull(V1)
if(length(res)>1){
res %<>%str_c(collapse = ';') %>% str_c(';')
}
return(res)
}
Known_longest_transcript_fa_Kegg <- read_delim("Known.longest_transcript.fa.Kegg.pathway",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
Gene_id = MyChangeKegg(x = Gene_id)) -> kegg_pathway
View(kegg_pathway)
Known_longest_transcript_fa_GO_list %>%
rowwise() %>% head() %>%
mutate(X1 = MyChangeKegg(x = X1))
Known_longest_transcript_fa_GO_list %>%
rowwise() %>% head() %>%
mutate(X1 = MyChangeKegg(x = X1)) -> go_list
Known_longest_transcript_fa_GO_list %>%
rowwise() %>%
mutate(X1 = MyChangeKegg(x = X1)) -> go_list
Known_longest_transcript_fa_GO_anno <- read_delim("Known.longest_transcript.fa.GO.anno.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Known_longest_transcript_fa_GO_anno)
getwd()
gc()
gc()
gc()
file.path('results', 'Known.longest_transcript.fa.Kegg.pathway')
kegg_pathway %>%
write.table(file = file.path('results', 'Known.longest_transcript.fa.Kegg.pathway'),
sep = '\t', row.names = F, col.names = T)
library(tidyverse)
gene_id2trans_id <- read.table('./gene_id2trans_id.txt', sep = '\t') %>%
distinct() %>%
mutate(V2 = str_replace_all(V2, ':', '_'))
symbol_list <- read.table('./symbol.list')
MyChangeKegg <- function(x){
all_gene <- str_split(x, ';') %>% unlist() %>%
str_remove_all('.gene')
res <- data.frame(origin = all_gene) %>%
left_join(gene_id2trans_id, by = c('origin'='V2')) %>% drop_na() %>% pull(V1)
if(length(res)>1){
res %<>%str_c(collapse = ';') %>% str_c(';')
}
return(res)
}
Known_longest_transcript_fa_Kegg <- read_delim("Known.longest_transcript.fa.Kegg.pathway",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
Known_longest_transcript_fa_Kegg %>%
rowwise() %>%
mutate(Gene_id = as.character(Gene_id),
Gene_id = MyChangeKegg(x = Gene_id)) -> kegg_pathway
kegg_pathway %>%
write.table(file = file.path('results', 'Known.longest_transcript.fa.Kegg.pathway'),
sep = '\t', row.names = F, col.names = T)
# save
dir.create('results')
kegg_pathway %>%
write.table(file = file.path('results', 'Known.longest_transcript.fa.Kegg.pathway'),
sep = '\t', row.names = F, col.names = T)
kegg_pathway %>%
write.table(file = file.path('results', 'Known.longest_transcript.fa.Kegg.pathway'),
sep = '\t', row.names = F, col.names = T, quote = F)
Known_longest_transcript_fa_GO_anno <- read_delim("Known.longest_transcript.fa.GO.anno.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
Known_longest_transcript_fa_GO_anno %>%
rowwise() %>% head() %>%
mutate(`#Gene` = MyChangeKegg(x = `#Gene`)) -> go_anno
View(go_anno)
View(Known_longest_transcript_fa_GO_anno)
symbol_list
symbol_list %>% tail()
library(loomR)
devtools::install_github(repo = "hhoeflin/hdf5r")
install.packages('hdf5r')
install.packages('loomR')
devtools::install_github(repo = "mojaveazure/loomR", ref = "develop")
library(loomR)
??Convert()
library(Seurat)
remotes::install_github("mojaveazure/seurat-disk")
library(SeuratDisk)
??as.loom()
library(Seurat)
edit(VlnPlot)
library(tidyverse)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(cowplot)
library(Seurat)
genesets = msigdbr(species = "Homo sapiens", category = "C2")
lapply(unique(genesets$gs_name), function(x){return(genesets[,x])})
genesets %>%
filter(gs_subcat == 'CP:KEGG') %>%
select(gs_name, gene_symbol) -> genesets
genesets = msigdbr(species = "Homo sapiens", category = "C2")
genesets %>%
filter(gs_subcat == 'CP:KEGG') %>%
select(gs_name, gene_symbol) -> genesets
lapply(unique(genesets$gs_name), function(x){return(genesets[,x])})
genesets
lapply(unique(genesets$gs_name), function(x){return(genesets[gs_name == x,])})
genesets
lapply(unique(genesets$gs_name), function(x){return(genesets['gs_name' == x,])})
unique(genesets$gs_name)
lapply(unique(genesets$gs_name), function(x){return(genesets[genesets$gs_name == x,])})
lapply(unique(genesets$gs_name), function(x){return(genesets[genesets$gs_name == x,]$gene_symbol)})
unique(genesets$gs_name)
lapply(unique(genesets$gs_name), function(x){
return(genesets[genesets$gs_name == x,]$gene_symbol)
}) -> gene_set_list
names(gene_set_list) <- unique(genesets$gs_name)
gene_set_list
View(gene_set_list)
genesets %>% split(geneset$gs_name)
split(genesets, geneset$gs_name)
split(genesets, genesets$gs_name)
split(genesets, genesets$gs_name) %>%
lapply(function(x){return(x$gene_symbol)})
split(genesets, genesets$gs_name) %>%
lapply(function(x){return(x$gene_symbol)}) -> gene_set_gsva
split(genesets, by = 'gs_name')
split(genesets, f = 'gs_name') %>%
lapply(function(x){return(x$gene_symbol)}) -> gene_set_gsva
split(genesets, f = 'gs_name')
split(genesets, f = genesets$gs_name)
genesets$gs_nam
genesets$gs_name
a <- genesets$gs_name
split(genesets, f = a )
a <- genesets$gene_symbol
split(genesets, f = a )
a
View(genesets)
split(genesets, f = 1:5)
a <- genesets$gene_symbol
split(genesets, a) %>%
lapply(function(x){return(x$gene_symbol)}) -> gene_set_gsva
View(gene_set_list)
library(Seurat)
library(SeuratDisk)
